TODO
===============================================================================
- Crack slope data
- Crack signs data
- Identify artwork
- Disassemble Z80
- Identify music tracks

LOCATIONS
===============================================================================
; 0xfc01: cursor position in menu
; 0xfc10: cursor position on title screen
; 0x5ac9: the volume of 'enemy' car engine sounds
; 0x5adc: some sort of frame counter that is reset when you start a race etc
; 0x5b00.b: Curve data decompressed, one byte per "step", ends with $FF
; 0x6300.w: Background horizontal displacement
; 0x7300.b: Slope data decompressed
; 0x7b00.b: Background vertical displacement (positive=up). Glitches if not $00-$27 or $B9-$FF
; 0x8300.b: unknown_track_data_1 decompressed
; 0x900a: Amount of (warmup?) laps to drive. 16-bit.
; 0x9030: List of driver points awarded, by team order
; 0x9043: Player team
; 0x9044: Drivers and teams mapping
; 0x905E: ???
; 0x906E: The placement (this round) of each team during the results
; 0x907E: Points awarded (this round) per team during results
; 0x9100: Current shift
; 0x9102: Engine RPM. When meter is 10, value is 1000
; 0x9104: Engine RPM to be rendered (used for smooth gauge movement)
; 0x9106: Speed (why two?)
; 0x9108: Speed
; 0x910A: ? affects horizontal displacement when driving in curves
; 0x9144.w: Current track idx to be loaded from Track_data
; 0x9146.w: 0 right before lap start, then 1 when lap starts. When 0, several code paths are skipped and RPM only updates visually
; 0x9148.w: practice mode
; 0x914A.w: warm up
; Data written from Team_car_characteristics:
; - 0x915C: Acceleration selector
; - 0x915E: Engine_data_offset selector
; - 0x9160: steering?
; - 0x9162: breaks?
; - 0x9164: rpm?
; 0x9161: steering
; 0x9180: "Engine_data_variant" - RPM for current shift offset (based on Player_team, practice mode is $003C)
; 0x9182: Acceleration modifier based on Player_team (0 in practice mode)
; 0x9206: ?
; 0x9208: Controls acceleration. 0 in practice mode, can be 1 or 2.
; 0x920A: unknown_track_data_1
; 0x9222: ?
; 0x9226; ?
; 0x9240: Pointer to start of signs data for current track
; 0x9244: Pointer to current signs data location
; 0x924C.l: Pointer to signs data (in ROM)
; 0x9250: ?
; 0xA980: ? Some struct
; 0xAE00: Player state struct ??
; 0xae12: Player horizontal position (0 middle, positive right, negative left)
; 0xae1a: Player distance on current track
; 0xae26: Player's current speed (read only)
; 0xB080: List of AI car structs
; 0xE9EC: 10 bytes determines team color
; 0xFC14: ?
; 0xfc50: crash recoil from signs (word)
; 0xfc54: Set last bit to crash/retire (word)
; 0xfc80: Disables speed update (boolean)
; 0xFCA6: Typically false, setting to true makes car almost always accelerate
; 0xFF04: Input key state bitset: start, A, C, B, right, left, down, up
; 0xFF05: Input key click bitset: Set for one frame if key clicked?
; 0xFF20: Input key mapping ("Control type" in settings)
; - 0xFF20: Key for Shift down
; - 0xFF21: Key for Shift up
; - 0xFF22: Key for Accelerate
; - 0xFF23: Key for Break
; 0xff26: Language. 0 = Japanese, 1 = English
; 0xffae: Copy of speed (useless, only written to?)
; 0xff2e: Current shift type (0 = automatic, 1 = 4-shift, 2 = 7-shift)


TEAM INTRODUCTION OBJECTS
================================================================================
loc_21F14 Mechanic 1 (Bearded, hands on chest, short sleeved, shirt, trousers)
loc_21F54 Mechanic 2 (Gloves, uniform, short sleeved, one hand on chest, one on leg)
loc_21F1E Mechanic 3 (Arms crossed, uniform, bearded, short-sleeved)
loc_21EF6 Mechanic 4 (Arms down, gloves, ear protection)
loc_21F4A Mechanic 5 (Glasses, ear protection short-sleeved)
loc_21F6C
loc_21EC0
loc_21ECC
loc_21EEE
loc_21F02
loc_21F2E
loc_21F42
loc_21F3A
loc_21ED4
loc_21F62
loc_21E9C

CURVE DATA DECOMPRESSED FORMAT
================================================================================
Stored in $00FF5B00 (Curve_data) onwards, read from loc_6C1C (and also loc_6CF0 for some reason)
One byte per step forward. Ends with $FF.
Seems to render ca 26 steps forward? Code reads 40 bytes ahead.
Byte values:
* 00    = Straight
* 01-2F = Left turn, from extreme (01) to soft (2F)
* 30-3F = Game freezes
* 40    = Graphical glitch, probably not used
* 41-6F = Right turn, from extreme (41) to soft (6F)
* 70-7F = Game freezes
* 80-FF = Continue reading from start of track
So:
* Lower 6 bits determine sharpness (higher value = softer turn). Except all zero = straight
* Bit 7 determines if right turn
* Bit 8 special case to read from start of track (used at end to render from start for next lap)

$00FF6300 stores background rotation, encoded together with curve data in ROM.
In memory it seems to be stored as absolute rotation, but the RLE encoding used in ROM looks relative.
Code does continuous SUB and ADD to get the resulting absolute value to write to memory.

SLOPE DATA DECOMPRESSED FORMAT
================================================================================
Stored in $00FF7300 onwards. Parsed using Double_integral similar to curve data.
Byte values:
* 00    = Flat
* 01-2F = Down slope, from extreme (01) to soft (2F)
* 30-3F = Game freezes
* 40    = Graphical glitch, probably not used
* 41-6F = Up slope, from extreme (41) to soft (6F)
* 70-7F = Game freezes
* 80-FF = Continue reading from start of track